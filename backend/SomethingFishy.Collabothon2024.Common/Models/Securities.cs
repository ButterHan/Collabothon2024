using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace SomethingFishy.Collabothon2024.Common.Models;

// Generated using Gemini Advanced Artificial Intelligence, refined by Emzi Human Intelligence.

public sealed class CommerzAccountId
{

    /// <summary>
    /// The pseudomized securities account ID.
    /// </summary>
    public string PseudonymizedAccountId { get; set; }

    /// <summary>
    /// The publicly known securities account ID (12/13 digits).
    /// </summary>
    public string SecuritiesAccountId { get; set; }
}

public sealed class CommerzBlockInfo
{

    /// <summary>
    /// Optional description for blocking reason.
    /// </summary>
    public string BlockText { get; set; }

    /// <summary>
    /// Asset is blocked to which date.
    /// </summary>
    public DateOnly BlockTo { get; set; }
}

public sealed class CommerzCancellationInfo
{

    /// <summary>
    /// Id of the cancellation transaction.
    /// </summary>
    public string CancelledTransactionId { get; set; }

    /// <summary>
    /// true or false.
    /// </summary>
    public bool IsCancelation { get; set; }
}

public sealed class CommerzCost
{

    /// <summary>
    /// Description of cost.
    /// </summary>
    public string CostDescription { get; set; }

    public CommerzMoney Money { get; set; }
}

public sealed class CommerzCurrentPrice
{

    public CommerzPrice Price { get; set; }

    /// <summary>
    /// Only for foreign currency exchange rates and euro clearing accounts, otherwise value=1.
    /// </summary>
    public decimal ExchangeRate { get; set; }

    /// <summary>
    /// Date of determined exchange rate.
    /// </summary>
    public DateOnly ExchangeRateDate { get; set; }

    /// <summary>
    /// Date of determined quote.
    /// </summary>
    public DateOnly QuoteDate { get; set; }
}

public sealed class CommerzInitialprice
{

    public CommerzPrice Price { get; set; }

    /// <summary>
    /// Only for foreign currency exchange rates and euro clearing accounts, otherwise value=1.
    /// </summary>
    public decimal ExchangeRate { get; set; }
}

public sealed class CommerzMoney
{

    /// <summary>
    /// The amount of money as float number with a descendant number of 2.
    /// </summary>
    public decimal Amount { get; set; }

    /// <summary>
    /// 3 chars currency-code according to ISO-4217.
    /// </summary>
    public string Currency { get; set; }
}

public sealed class CommerzPortfolioOverviewResponse
{

    /// <summary>
    /// The date when the report is created.
    /// </summary>
    public DateOnly CreationDate { get; set; }

    /// <summary>
    /// The date when the securities account is evaluated.
    /// </summary>
    public DateOnly EffectiveDate { get; set; }

    /// <summary>
    /// Detailed information about the positions within the portfolio
    /// </summary>
    public IEnumerable<CommerzPosition> Positions { get; set; }

    /// <summary>
    /// The publicly known securities account ID (12/13 digits).
    /// </summary>
    public string SecuritiesAccountId { get; set; }

    public CommerzMoney TotalValue { get; set; }
}

public sealed class CommerzPosition
{

    public CommerzMoney AccruedInterest { get; set; }

    public CommerzCurrentPrice CurrentPrice { get; set; }

    public CommerzInitialprice InitialPrice { get; set; }

    /// <summary>
    /// The date when the securities was traded for the last time.
    /// </summary>
    public DateOnly LastTradeDate { get; set; }

    public CommerzMoney PayedAccruedInterest { get; set; }

    public CommerzMoney Payout { get; set; }

    /// <summary>
    /// Internal ID of the position.
    /// </summary>
    public string PositionId { get; set; }

    public CommerzQuantity Quantity { get; set; }

    /// <summary>
    /// MasterData of Securities.
    /// </summary>
    public CommerzPositionsMasterdata Masterdata { get; set; }
}

public sealed class CommerzProblem
{

    /// <summary>
    /// An absolute URI that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML).
    /// </summary>
    public string Type { get; set; }

    /// <summary>
    /// A short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localised).
    /// </summary>
    public string Title { get; set; }

    /// <summary>
    /// The HTTP status code generated by the origin server for this occurrence of the problem.
    /// </summary>
    public int Status { get; set; }

    /// <summary>
    /// A human readable explanation specific to this occurrence of the problem.
    /// </summary>
    public string Detail { get; set; }

    /// <summary>
    /// An absolute URI that identifies the specific occurrence of the problem.
    /// It may or may not yield further information if dereferenced.
    /// </summary>
    public string Instance { get; set; }
}

public sealed class CommerzQuantity
{

    /// <summary>
    /// The number of the quantity as floating point.
    /// </summary>
    public decimal Amount { get; set; }

    /// <summary>
    /// Dependent on notationType, either currency or "pieces".
    /// </summary>
    public string Unit { get; set; }
}

public sealed class CommerzAccountsResponse
{

    /// <summary>
    /// if the list is filtered, the attribute is set to "y", else, it is set to "n".
    /// </summary>
    [JsonConverter(typeof(CommerzYesNoConverter))]
    public bool ListFiltered { get; set; }

    public IEnumerable<CommerzAccountId> SecuritiesAccountIds { get; set; }
}

public sealed class CommerzSecuritiesMasterdata
{

    /// <summary>
    /// International Securities Identification Number, a 12-character alphanumeric code that serves for uniform identification of a security.
    /// </summary>
    public string Isin { get; set; }

    /// <summary>
    /// Wertpapierkennnummer, a German securities identification code of 6 alphanumeric characters.
    /// </summary>
    public string Wkn { get; set; }

    /// <summary>
    /// Long name of the security.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Notation type of securities.
    /// </summary>
    public string NotationType { get; set; }
}

public sealed class CommerzPositionsMasterdata
{

    public CommerzSecuritiesMasterdata SecuritiesMasterdata { get; set; }

    /// <summary>
    /// ISO 4217 currency code for securities.
    /// </summary>
    public string Currency { get; set; }

    /// <summary>
    /// Maturity date of securities.
    /// </summary>
    public DateOnly MaturityDate { get; set; }

    /// <summary>
    /// Recommendation whether to buy, sell or hold the securities.
    /// </summary>
    public CommerzSecurityVote Vote { get; set; }
}

public sealed class CommerzSize
{

    /// <summary>
    /// The amount of the size.
    /// </summary>
    public decimal Amount { get; set; }

    /// <summary>
    /// Dependent on notationType, either currency or "pieces".
    /// </summary>
    public string Unit { get; set; }
}

public sealed class CommerzTransaction
{

    public CommerzMoney AccruedInterest { get; set; }

    public CommerzBlockInfo BlockInfo { get; set; }

    /// <summary>
    /// The BookingDate as string in YYYY-MM-DD format.
    /// </summary>
    public DateOnly BookingDate { get; set; }

    public CommerzCancellationInfo CancellationInfo { get; set; }

    public IEnumerable<CommerzCost> Costs { get; set; }

    /// <summary>
    /// Depository of securities.
    /// </summary>
    public string Depository { get; set; }

    /// <summary>
    /// Only for foreign currency exchange rates and euro clearing accounts, otherwise value=1.
    /// </summary>
    public decimal ExchangeRate { get; set; }

    /// <summary>
    /// Internal ID of the position.
    /// </summary>
    public string PositionId { get; set; }

    public CommerzPrice Price { get; set; }

    public CommerzSecuritiesMasterdata Masterdata { get; set; }

    public CommerzSize Size { get; set; }

    /// <summary>
    /// Trading date.
    /// </summary>
    public DateOnly TradingDate { get; set; }

    /// <summary>
    /// Trading platform of securities.
    /// </summary>
    public string TradingPlatform { get; set; }

    /// <summary>
    /// Trading time.
    /// </summary>
    public DateTimeOffset TradingTimestamp { get; set; }

    /// <summary>
    /// Id of the transcation.
    /// </summary>
    public string TransactionId { get; set; }

    public CommerzTransactionTypeDefinition TransactionType { get; set; }

    /// <summary>
    /// Valuta date.
    /// </summary>
    public DateOnly ValutaDate { get; set; }

    /// <summary>
    /// Settlement Account + Currency.
    /// </summary>
    public string SettlementAccount { get; set; }

    /// <summary>
    /// Reference to the settlement account.
    /// </summary>
    public CommerzSettlementAccountReference SettlementAccountReference { get; set; }

    public CommerzMoney MarketValue { get; set; }

    public CommerzMoney ActualAmount { get; set; }

    /// <summary>
    /// Order Number.
    /// </summary>
    public string ExternalOrderNumber { get; set; }

    /// <summary>
    /// Settlement Number.
    /// </summary>
    public string SettlementNumber { get; set; }

    /// <summary>
    /// Execution Number.
    /// </summary>
    public int ExecutionNumber { get; set; }

    /// <summary>
    /// The Wertpapier-Auftrags-Identifikations-Nummer (WPAID), which represents a 16-characters order number.
    /// </summary>
    public string ClientOrderId { get; set; }

    /// <summary>
    /// Detail type of a transaction. This helps e.g. to distinguish between a money turnover of a securities purchase and a simple debit from a money account.
    /// </summary>
    public string TransactionDetailedType { get; set; }

    public CommerzTaxDetails TaxDetails { get; set; }
}

public sealed class CommerzTransactionTypeDefinition
{

    /// <summary>
    /// Type definition of a transaction.
    /// </summary>
    public string Id { get; set; }

    /// <summary>
    /// name of the type of the transaction.
    /// </summary>
    public CommerzSecurityTransactionType Name { get; set; }
}

public sealed class CommerzTaxDetailsDefinition
{

    /// <summary>
    /// Type of tax.
    /// </summary>
    public string TaxType { get; set; }

    /// <summary>
    /// Description of tax type.
    /// </summary>
    public IReadOnlyDictionary<string, string> TaxTypeDescription { get; set; }

    public CommerzMoney Amount { get; set; }
}

public sealed class CommerzTransactionsResponse
{

    public string SecuritiesAccountId { get; set; }

    public IEnumerable<CommerzTransaction> Transactions { get; set; }
}

public sealed class CommerzPrice
{

    /// <summary>
    /// The amount of the current price as floating point.
    /// </summary>
    public decimal Amount { get; set; }

    /// <summary>
    /// Dependent on notationType, either currency or "%".
    /// </summary>
    public string Unit { get; set; }
}

public sealed class CommerzSettlementAccountReference
{

    /// <summary>
    /// IBAN for settlement account.
    /// </summary>
    public string Iban { get; set; }

    /// <summary>
    /// ISO 4217 Alpha 3 settlement account currency code.
    /// </summary>
    public string Currency { get; set; }
}

public sealed class CommerzTaxDetails
{

    public IEnumerable<CommerzTaxDetailsDefinition> Taxes { get; set; }
}

public enum CommerzSecurityVote
{
    Buy,
    Sell,
    Hold,
}

public enum CommerzSecurityTransactionType
{
    Purchase,
    Sale,
    Delivery,
    Deposit,
    Maturity
}
